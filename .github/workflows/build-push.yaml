name: Build and Push

on:
  push:
    branches: [ "main" ]
    paths:
      - '**'
  workflow_dispatch:   # Add this line to allow manual/API trigger!
    inputs:
      application_repo:
        description: 'Repository to build (format: owner/repo)'
        required: true
        type: string
      dockerfile_path:
        description: 'Path to Dockerfile in the application repo'
        required: false
        type: string
        default: "Dockerfile"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout project-rc-infra Repo
        uses: actions/checkout@v4
        with:
          path: project-rc-infra
          token: ${{ secrets.GHCR_TOKEN }}

      - name: Extract Application Name
        id: vars
        run: |
          APP_NAME=$(echo "${{ inputs.application_repo }}" | cut -d'/' -f2)
          echo "APP_NAME=${APP_NAME}" >> $GITHUB_OUTPUT
          echo "IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/${APP_NAME}" >> $GITHUB_OUTPUT

      - name: Checkout Application Source Repo
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.application_repo }}
          token: ${{ secrets.GHCR_TOKEN }}
          path: app-code

      - name: Debug - Verify Repository Contents
        run: |
          echo "=== WORKSPACE ==="
          ls -la
          echo "=== APP-CODE ==="
          ls -la app-code/
          echo "=== DOCKERFILE ==="
          test -f "app-code/${{ inputs.dockerfile_path }}" && \
            echo "Dockerfile exists at app-code/${{ inputs.dockerfile_path }}" || \
            { echo "ERROR: Dockerfile not found"; exit 1; }

      - name: Login to GHCR
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: app-code
          push: true
          tags: |
            ${{ steps.vars.outputs.IMAGE_NAME }}:${{ github.sha }}
            ${{ steps.vars.outputs.IMAGE_NAME }}:latest

      - name: Verify Template Files
        run: |
          echo "=== ROOT DIRECTORY ==="
          ls -la /
          echo "Checking workload templates:"
          ls -la project-rc-infra/workloads/_template/
          echo "Checking cluster templates:"
          ls -la project-rc-infra/clusters/rc-master/apps/_template/

      - name: Generate Manifests
        run: |
          APPLICATION_NAME=${{ steps.vars.outputs.APP_NAME }}
          GITHUB_SHA=${{ github.sha }}
          
          # Process workload manifests
          mkdir -p project-rc-infra/generated/workloads/${APPLICATION_NAME}
          cp -r project-rc-infra/workloads/_template/* project-rc-infra/generated/workloads/${APPLICATION_NAME}/
          find project-rc-infra/generated/workloads/${APPLICATION_NAME} -type f -exec sed -i \
            -e "s/{{APP_NAME}}/${APPLICATION_NAME}/g" \
            -e "s/{{IMAGE_TAG}}/${GITHUB_SHA}/g" {} \;
          
          # Process cluster configs
          mkdir -p project-rc-infra/generated/clusters/rc-master/apps/${APPLICATION_NAME}
          cp -r project-rc-infra/clusters/rc-master/apps/_template/* project-rc-infra/generated/clusters/rc-master/apps/${APPLICATION_NAME}/
          find project-rc-infra/generated/clusters/rc-master/apps/${APPLICATION_NAME} -type f -exec sed -i \
            -e "s/{{APP_NAME}}/${APPLICATION_NAME}/g" \
            -e "s/{{IMAGE_TAG}}/${GITHUB_SHA}/g" {} \;
        
      - name: Verify Copy Results
        run: |
          echo "Copied workload files:"
          ls -la project-rc-infra/generated/workloads/${{ steps.vars.outputs.APP_NAME }}/
          echo "Copied cluster files:"
          ls -la project-rc-infra/generated/clusters/rc-master/apps/${{ steps.vars.outputs.APP_NAME }}/

      - name: Configure Git Identity
        run: |
          git config --global user.name "shahryaraly"
          git config --global user.email "shahryaraly@live.com"
        working-directory: project-rc-infra

      - name: List Generated Files
        run: |
          echo "Workload files:"
          ls generated/workloads/${{ steps.vars.outputs.APP_NAME }}/
          echo "Cluster files:"
          ls generated/clusters/rc-master/apps/${{ steps.vars.outputs.APP_NAME }}/
        working-directory: project-rc-infra

      - name: Stage and Commit Changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Autogen manifests for ${{ steps.vars.outputs.APP_NAME }}"
          file_pattern: |
            generated/workloads/${{ steps.vars.outputs.APP_NAME }}/*.yaml
            generated/clusters/rc-master/apps/${{ steps.vars.outputs.APP_NAME }}/*.yaml
          branch: main
          push: true
          working_directory: project-rc-infra
          repository: project-rc-infra
        env:
          GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN }}