name: Deploy
on:
  workflow_run:
    workflows: ["Build and Push"]
    branches: [main]
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: demo-cicd
          path: demo-cicd

      - name: Deploy
        run: |
          kubectl apply -f demo-cicd/k8s/
          kubectl set image deployment/demo-cicd demo-cicd=ghcr.io/${{ github.repository_owner }}/demo-cicd:${{ github.event.workflow_run.head_sha }}
        env:
          KUBECONFIG: YXBpVmVyc2lvbjogdjEKY2x1c3RlcnM6Ci0gY2x1c3RlcjoKICAgIGNlcnRpZmljYXRlLWF1dGhvcml0eS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VSQ1ZFTkRRV1V5WjBGM1NVSkJaMGxKVkZNd1MweG1NRTFoUTJOM1JGRlpTa3R2V2tsb2RtTk9RVkZGVEVKUlFYZEdWRVZVVFVKRlIwRXhWVVVLUVhoTlMyRXpWbWxhV0VwMVdsaFNiR042UVdWR2R6QjVUbFJCTUUxVVNYaE9hbEYzVGxSQ1lVWjNNSHBPVkVFd1RWUkJlRTVxVVRGT1ZFSmhUVUpWZUFwRmVrRlNRbWRPVmtKQlRWUkRiWFF4V1cxV2VXSnRWakJhV0UxM1oyZEZhVTFCTUVkRFUzRkhVMGxpTTBSUlJVSkJVVlZCUVRSSlFrUjNRWGRuWjBWTENrRnZTVUpCVVVNdk1WZGplakZEVFZNeVl6Sk5aM05oWlVwWFltZEdNMUkwTUhSV2RWSkJaalV3WWxGTVdsVlhUMVp2TDFoSE5FVldLeXRaWVdwWllVNEtSemRyWkZGdFMydDZNV1ExU1ZWTFpubE1RM0puV0c5MVZVTndjMUJDVFdKeU1XNXRRVWhhTjI5aVVteFpRVlp4SzJGaVVqVnlXRGhGUVVnd1pXRjVid294TVZNNVIyWTNZVUZPVnpsaWRVRkhaV1U1UVRkT1JYUTJWV3Q1TjFoS1lrUjViRXRqUnpCTU5YbzNhMHRXTWxoelRXeFNjM1pFUmxGVVUySXlOM05sQ2xsMVprcFJhakJKU2tOVlNYaERMMjFRV1VaaWJFSlZWVlJhYjJ0QlNFMTBRakJGTlc1alJYRjNUMHMwTUZkQldsRkhSbVkyTTNwMFZISk9aalJaS3pJS1QyZEdUSE5EVFVSVFRYaFJibVJIVmpCRFYyRlJLMDUzVjJkNk9VVnhLemR0TWxwVWFtRnBXRkpMV2xKc2NEWXdlakkyYlZWb1dqZE9VamxrTDJoWVFRcHJkRkF5YUVWRGNtdDZRWFIzTlVKdU15dHJNbGsyTkhBM01qWkNRV2ROUWtGQlIycFhWRUpZVFVFMFIwRXhWV1JFZDBWQ0wzZFJSVUYzU1VOd1JFRlFDa0puVGxaSVVrMUNRV1k0UlVKVVFVUkJVVWd2VFVJd1IwRXhWV1JFWjFGWFFrSlVaRko2SzJFMWVqZEdaa2xYYkVabmVDdEtlRmwwV1ZaTldFWjZRVllLUW1kT1ZraFNSVVZFYWtGTloyZHdjbVJYU214amJUVnNaRWRXZWsxQk1FZERVM0ZIVTBsaU0wUlJSVUpEZDFWQlFUUkpRa0ZSUVVWelJEVk9UWGhLYmdwQlpUVk5NVE5QY1ZsNGFEaEtkblJRWkZOVk9VSkJNRGhRWldKMlpEQk5ValZTZVhsNlRITTVjblZaZFdaa05WcFdaa0ZHVnpWTFJHWlpWWGRHUjJGRUNtaEtXRTh4U2pCd1prSnNhMlJGYmtKR1EweEZWR1pCWnpsM1psaDJWMEZzWkU0MGFuTk9iamg2TVZSdmVEbEVRbTFDWVhnMldESjNhbk5YVlU5VE5HY0tNR2g2TW1aWmJsZE9Zblp5VjJsc1MzSlZUMWR1VkZKdU5sZElWM2cxZWt4aGF6TlpTM1ZhZVZKNFJEQnpkM0oyVGpGa1EyRkdTbmxtWWt4SlVVUjRVd3BhY0ZwWk5qWkRaMHhVWkVsMmNUZzRMekZ6ZDAwMFRrWnJOMGwyWW1GSFJVUTNaM1Z4VEZoc1ZXbENUVGgxVmxsd2RVWXpWRTlUVjJ3d0syaEJhR2hDQ2tGUmVsZENNbmQxTlZKb09IVlRiV0Z4VkRWcVdVNU1hMGhrU1ZSa1VVaEhlRmRCVXpOWVVscHlRVE5SYzFZM2RFTjZSbk5UUlN0aVpHaHZjR05aYTBrS1VYVnpXR3RWZVdWU1owOWlDaTB0TFMwdFJVNUVJRU5GVWxSSlJrbERRVlJGTFMwdExTMEsKICAgIHNlcnZlcjogaHR0cHM6Ly8xOTIuMTY4LjcwLjEwOjY0NDMKICBuYW1lOiBrdWJlcm5ldGVzCmNvbnRleHRzOgotIGNvbnRleHQ6CiAgICBjbHVzdGVyOiBrdWJlcm5ldGVzCiAgICB1c2VyOiBrdWJlcm5ldGVzLWFkbWluCiAgbmFtZToga3ViZXJuZXRlcy1hZG1pbkBrdWJlcm5ldGVzCmN1cnJlbnQtY29udGV4dDoga3ViZXJuZXRlcy1hZG1pbkBrdWJlcm5ldGVzCmtpbmQ6IENvbmZpZwpwcmVmZXJlbmNlczoge30KdXNlcnM6Ci0gbmFtZToga3ViZXJuZXRlcy1hZG1pbgogIHVzZXI6CiAgICBjbGllbnQtY2VydGlmaWNhdGUtZGF0YTogTFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVUkxWRU5EUVdoSFowRjNTVUpCWjBsSlJFb3ZXWEJ5UTBsMWFGbDNSRkZaU2t0dldrbG9kbU5PUVZGRlRFSlJRWGRHVkVWVVRVSkZSMEV4VlVVS1FYaE5TMkV6Vm1sYVdFcDFXbGhTYkdONlFXVkdkekI1VGxSQk1FMVVTWGhPYWxGM1RsUkNZVVozTUhsT2FrRXdUVlJKZUU1cVVURk9WRVpoVFVSM2VBcElla0ZrUW1kT1ZrSkJiMVJHYlhReFdXMVdhRnBITURaWk1uZ3hZek5TYkdOcE1XaGFSekZ3WW01TmVFZFVRVmhDWjA1V1FrRk5WRVZIZERGWmJWWjVDbUp0VmpCYVdFMTBXVmRTZEdGWE5IZG5aMFZwVFVFd1IwTlRjVWRUU1dJelJGRkZRa0ZSVlVGQk5FbENSSGRCZDJkblJVdEJiMGxDUVZGRVQzVlVMeXNLTTFkNFIzQjNUVkJyUVRFd1ozSnZkVGcxWldsWlQySlVNa3ROVEhsclRqRXdiMHh2Y0UxWFNGQnlLMFJHU1hsa05VUnhTSEZXYVNzdldVWlBNVUl2TmdwaVNIRlRUVXRyUjJaTk9XMUJSVkpYUkdVcldtUTNZVE5hUVZCTE4yVm9SbXBwUlZjeGJtSXhTMmsxTTBwS1dETTNhaXRETTB4Q01rWkpjeXQyZEdGNkNrWlZPVTVCU2pGUU5tWnVWRzlXYWpaelVuTmFVMkYzTVVSRk9FZ3dUR1F6UlZGdFluWlNkU3MwTDFCVFEwRTBLemxzY1hRclQyaDNUMlFyY1ZObE1Hd0tZa05MTVRGMU1VSTFWMlJNZVZKdU1EWjNkVlZIY0N0MFFqTjZPSEptVDFaQ05HcGFWRkU1VjFweFVqTXdhMFExT0dSb1JFWXlkVFJMWWxWUGIwbDRUQXBHTDJGa1FYUmhSelE1ZFU1WFN5OXRNVkp1TDJRd2FtVTNaRVpZUm1vMlVVTXhhM1UyWTFVd1NrOWxhSGMxV1dJdldtSkZhVnB0WW5wQ1QyeEtTamQ2Q21WSmRXNW9ORkV4ZFRSMWJISnpXRTVCWjAxQ1FVRkhhbFpxUWxWTlFUUkhRVEZWWkVSM1JVSXZkMUZGUVhkSlJtOUVRVlJDWjA1V1NGTlZSVVJFUVVzS1FtZG5ja0puUlVaQ1VXTkVRV3BCVFVKblRsWklVazFDUVdZNFJVRnFRVUZOUWpoSFFURlZaRWwzVVZsTlFtRkJSazR4U0ZBMWNtNVFjMVk0YUdGVlZ3cEVTRFJ1Um1reGFGVjRZMWhOUVRCSFExTnhSMU5KWWpORVVVVkNRM2RWUVVFMFNVSkJVVU55TDA1eGFsQjJkVmhaYUhoRWVGSjFUMEl4TUdGbk55ODVDbFZrWkhsaGJUZEVLeXR3TTFWVlUzTjVhWHBxWlhSS09YQk1PR3hVZFdselNUTjZUR3QyYUZsak1FUTJlV0ZOUTFKbGRsaHRRazV2YUVaeE1IbGxSbTBLUjBGMllsSmFkVWgwWjAxRk1tVktjekYwUkdaWVRuaHBUV0l5UWpCUmIwcHVNRGRLY1haQ1VYQlVNVEozUjBGc1MzSm1PSFV6Y0hOSVdpdERXRFZUS3dwYVRqZEtWemhrYVdGbFNHSk9URVZzT1VwQ1dESklNRlpCYkVNMGRVWmFhRkIxVlM5cFprcE9abkVyZVRSbGVrTnhZVTVuUzNsWlFrTkxaMVl4Y1ZZd0NtcGpRaXRxVkU5dE9YUm9la1oxY1VwcWJqUjFNMGxaT1dscldFdHlObTh4WTBvemQwSklOa1l4T1hOTE1ubEtTVnBXUVRWM1p6WnJSVUYwZVZWa2JFOEtPRGhTTVVsRlIybEJRVVpCU2xKS1YwVkVSR1o2VFZCTGNUWnNjbXBVTUdSU2NFaFRLemM1UmpjNGNUSnpWRGx6TlZoUmNrdHVSSEZ5U0daNUNpMHRMUzB0UlU1RUlFTkZVbFJKUmtsRFFWUkZMUzB0TFMwSwogICAgY2xpZW50LWtleS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJTVTBFZ1VGSkpWa0ZVUlNCTFJWa3RMUzB0TFFwTlNVbEZjRUZKUWtGQlMwTkJVVVZCZW5Kckx5OTBNWE5TY1dORVJEVkJUbVJKU3paTWRrOVliMjFFYlRBNWFXcERPSEJFWkdSTFF6WkxWRVpvZWpZdkNtZDRVMDF1WlZFMmFEWnNXWFoyTWtKVWRGRm1LMjE0Tm10cVEzQkNibnBRV21kQ1JWWm5NM1p0V0dVeWRESlJSSGwxTTI5U1dUUm9SblJhTWpsVGIzVUtaSGxUVmprck5DOW5kSGwzWkdoVFRGQnlOMWR6ZUZaUVZGRkRaRlFyYmpVd05rWlpLM0pGWWtkVmJYTk9VWGhRUWpsRE0yUjRSVXB0TnpCaWRuVlFlZ293WjJkUFVIWmFZWEptYW05alJHNW1jV3R1ZEVwWGQybDBaR0owVVdWV2JsTTRhMW81VDNOTWJFSnhabkpSWkRndlN6TjZiRkZsU1RKVk1GQldiV0ZyQ21RNVNrRXJaa2haVVhoa2NuVkRiVEZFY1VOTlUzaG1NbTVSVEZkb2RWQmlhbFpwZGpWMFZWb3ZNMlJKTTNVelVsWjRXU3RyUVhSYVRIVnVSazVEVkc0S2IyTlBWMGN2TWxkNFNXMWFiVGgzVkhCVFUyVTRNMmxNY0RSbFJVNWlkVXh3WVRkR2VsRkpSRUZSUVVKQmIwbENRVU5IVDA1SVRXTlpaM281TkhsT1RncHJUVWRQZW5OWU9GTkhjbFpMSzB4TVZWaDNRMk4yZWxoR1QxUkxhV295ZGpBNGNHeE9XVmxVYlN0VFZtVndRbFlyWmpGbWRGZHJhVE54Y1VsT05HVlZDa1IwTlZKM1RWaDJUVk4wUzBsWFExaFlXRFE1U3l0NlQyRXhVMWh5TW5WUlZUQmhTSEU0WnpRMWFIQktNVWRNTWxweWRtbHZiSE5xV2tkSWRHSmFkV2dLVFZOd1NFVklhSGM0ZVUxb2MwWkNWVVpUWjBKdGVWazJiamhMYkc1MlZtWm5XbUZFT1dkQlRtMVRXSHA1VGxRNVNpOVpjMjVOVEhwVlp6WmhhRzFIU0FwcmFVTm1VME5OVFZGWGNqRXJkMmxNVDA5eGVFVlZVbHBzYjJFM1dtNUdhR1ZQY2s1d1MyWk9OR3d4U3pVcldGQnFWMVZYUkRnMVYzUTJSRWhCTkM5UkNrWnBORE5XUnpWNmJtMXdkMjFTYzNnd1MyTmtNRVJsVDJWSFJVNVVabTFMU1hBeldFd3JOM2RqSzNaNGRVNTBZazF0T0ZKdE9FRmxTaXRTTUZKUWRFWUtTV1o2T0hkTlJVTm5XVVZCTjNFeWNuVXhUMUZDWjJOc1p6QlZSRm8xYTBaRVNXbEVXVkUyYXpGaVozVlZNSEoyY1hoTk5sQXhVWE5tVFc5SFNXRlBiQXB2UzFWd2NFaHJjRFYzYmpGWGVEaENkakpHUkhkeGNVYzBhVE5vVVV0SGVXWk5XVk52V2pnclRUbExXRFkwZGxkM09GSktZWEY0WkVoaGVFRkpMek5ZQ2psVWFYWnFOVXAyT1haT2VqZDNWbUprZVhobFpFUnVWa1JKTkRjMFNrbEdaMDlKVkhOSFpDdFBhelpaU1UxMlVUVktkbkZTWjFWRFoxbEZRVE5pYm0wS01pdFRSR3RvZFRONVVXVXpSemxwTDB4SWJta3JRbTlOYjFsSlFVVTJOalJEY1hKSlpuRlZVa05yTjJsS2FrRmxlVUZwU21SaWFqaDZTRFI1ZDNFNE9Bb3ZVWHBHTW5WNWEzUnRSV2hFZUhRNFFWQmxjR1ZUZDNrNFoxTkxNMmgzTkdkWWFHSjRPRGNyYjFoVFdIZERXa1k0Wkc1UFQyTXJWVXR1V1RjelZIcExDazVMU20xc1QycFhlVFpwVTFCV05IaGxWRGc1U2twd1IxSkJRVFpzU0dZemRIRkZVbWQ1YTBObldVVkJiMk5VWlVvMWIzTm1TbXgwWVVod2Jra3hiRWtLV0dOV1RUTnZVM2hZYUZZeVpVbG1TM2d6V0VKMlpHbE5VMjkzVnl0alpsUTBNM3AxU3pSaVpubHlUWEZOTDJSb1JrNXBWWFEyVldsNFRIWTFPWFprYUFwYVZWcFBja2hMYkVWNlZFTlBVMnBRYVVkS1MzSkdNV3QzTURkVVRHeElTR2hJU2tkTk5WazJRWFpRWnl0UWFqRnNSMFpxU2pNeGJrWkNjRE5LVHpsNkNtZFlXVFZwUVN0MFRURkhMM1JGVEZGTk5VbHNhVUV3UTJkWlFXRmtZek00U0dWbmNISnZPR1pQV1VZM2JrVkZjMUZLZERabGFteGFjVTVpZW1kc01Vc0tVVXBzVDNFNGJ6bDZZVFJzVjI5aVFqTnRjbmhHY0U1emJpODNWWGgxTjJwVUwzWnZjRmRpSzNOT1lYVkpPWGxJYWxGaE0yaEVVRTFQUVdsUFpYaFhkZ3BPWW5KWFVFaHBZM05tY0U5SWQwMXVNbkJPUjNsUFVHOXpWbFo0YTBscFpFRlhhREpwZEdKbVZsRXliWEo1THl0U1ZFczFlRWxPZDB0QmNsWnVkamszQ2pGMmNuUkRVVXRDWjFGRFkyZ3dURzlqZGpGS1l6a3hNMEphWVRRclVXeDNZME0wVDBOdWVsWXlObTVPWWxCQ2NUaGFVakZNZEhnM1VESXlVMkYwSzNBS1UwOVJTbmx2YnpGNE1GUktjVVJLUVhKWVdsZFhNMHBIVnpsalJqUm5iR1JOVkV4SmJtUkVRa3BQS3pCWEswRTJaVXAzUWxKWE9UVkxhMnR6ZDBaUlpRcGFRVm93WVRFd1pqRnROSHBDY0RWc2J6aFdhVXhSY0RseFRYRk9ZbFJsWWsxVWVVWkhSa281V0N0NGJ6WnBkWGw2THpreVYwRTlQUW90TFMwdExVVk9SQ0JTVTBFZ1VGSkpWa0ZVUlNCTFJWa3RMUzB0TFFvPQo=